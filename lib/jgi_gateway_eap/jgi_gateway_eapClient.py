# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class jgi_gateway_eap(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def search(self, parameter, context=None):
        """
        The search function takes a search structure and returns a list of
        documents.
        :param parameter: instance of type "SearchInput" (search searches the
           JGI service for matches against the query, which may be a string
           or an object mapping string->string query - Other parameters
           @optional filter @optional limit @optional page @optional
           include_private) -> structure: parameter "query" of type
           "SearchQuery" -> mapping from String to String, parameter "filter"
           of type "SearchFilter" (SearchFilter The jgi back end takes a map
           of either string, integer, or array of integer. I don't think the
           type compiler supports union types, so unspecified it is.) ->
           mapping from String to unspecified object, parameter "sort" of
           list of type "SortSpec" -> structure: parameter "field" of String,
           parameter "descending" of Long, parameter "limit" of Long,
           parameter "page" of Long, parameter "include_private" of type
           "bool" (a bool defined as int)
        :returns: multiple set - (1) parameter "result" of type
           "SearchResult" -> structure: parameter "search_result" of type
           "SearchQueryResult" (SearchQueryResult The top level search object
           returned from the query. Note that this structure closely
           parallels that returned by the jgi search service. The only
           functional difference is that some field names which were prefixed
           by underscore are known by their unprefixed selfs. hits  - a list
           of the actual search result documents and statsitics returned;;
           note that this represents the window of search results defined by
           the limit input property. total - the total number of items
           matched by the search; not the same as the items actually
           returned;) -> structure: parameter "hits" of list of type
           "SearchResultItem" (SearchResult Represents a single search result
           item) -> structure: parameter "source" of type "SearchDocument"
           (SearchDocument The source document for the search; it is both the
           data obtained by the search as well as the source of the index. It
           is the entire metadata JAMO record.) -> unspecified object,
           parameter "index" of String, parameter "score" of String,
           parameter "JamoID" of String, parameter "total" of Long, (2)
           parameter "error" of type "Error" -> structure: parameter
           "message" of String, parameter "type" of String, parameter "code"
           of String, parameter "info" of unspecified object, (3) parameter
           "stats" of type "CallStats" (Call performance measurement) ->
           structure: parameter "request_elapsed_time" of Long
        """
        return self._client.call_method(
            'jgi_gateway_eap.search',
            [parameter], self._service_ver, context)

    def stage(self, parameter, context=None):
        """
        :param parameter: instance of type "StageInput" -> structure:
           parameter "file" of type "StageRequest" (STAGE) -> structure:
           parameter "id" of type "JamoID", parameter "filename" of String,
           parameter "username" of String
        :returns: multiple set - (1) parameter "result" of type
           "StagingResult" (StagingResult returns a map entry for each id
           submitted in the stage request. The map key is the _id property
           returned in a SearchResult item (not described here but probably
           should be), the value is a string describing the result of the
           staging request. At time of writing, the value is always "staging"
           since the request to the jgi gateway jgi service and the call to
           stage in the jgi gateway kbase service are in different
           processes.) -> structure: parameter "job_id" of String, parameter
           "job_monitoring_id" of String, (2) parameter "error" of type
           "Error" -> structure: parameter "message" of String, parameter
           "type" of String, parameter "code" of String, parameter "info" of
           unspecified object, (3) parameter "stats" of type "CallStats"
           (Call performance measurement) -> structure: parameter
           "request_elapsed_time" of Long
        """
        return self._client.call_method(
            'jgi_gateway_eap.stage',
            [parameter], self._service_ver, context)

    def stage_status(self, parameter, context=None):
        """
        Fetch the current status of the given staging fetch request as 
        identified by its job id
        :param parameter: instance of type "StagingStatusInput" -> structure:
           parameter "job_monitoring_id" of String
        :returns: multiple set - (1) parameter "result" of type
           "StagingStatusResult" -> structure: parameter "message" of String,
           (2) parameter "error" of type "Error" -> structure: parameter
           "message" of String, parameter "type" of String, parameter "code"
           of String, parameter "info" of unspecified object, (3) parameter
           "stats" of type "CallStats" (Call performance measurement) ->
           structure: parameter "request_elapsed_time" of Long
        """
        return self._client.call_method(
            'jgi_gateway_eap.stage_status',
            [parameter], self._service_ver, context)

    def staging_jobs(self, parameter, context=None):
        """
        Fetch all file staging jobs for the current user
        :param parameter: instance of type "StagingJobsInput" -> structure:
           parameter "filter" of type "StagingJobsFilter" -> structure:
           parameter "created_from" of type "timestamp", parameter
           "created_to" of type "timestamp", parameter "updated_from" of type
           "timestamp", parameter "updated_to" of type "timestamp", parameter
           "status" of String, parameter "id" of type "JamoID", parameter
           "job_ids" of list of String, parameter "job_monitoring_ids" of
           list of String, parameter "filename" of String, parameter "range"
           of type "StagingJobsRange" -> structure: parameter "start" of
           Long, parameter "limit" of Long, parameter "sort" of list of type
           "SortSpec" -> structure: parameter "field" of String, parameter
           "descending" of Long
        :returns: multiple set - (1) parameter "result" of type
           "StagingJobsResult" -> structure: parameter "staging_jobs" of list
           of type "StagingJob" -> structure: parameter "id" of type
           "JamoID", parameter "filename" of String, parameter "username" of
           String, parameter "job_id" of String, parameter "status_code" of
           String, parameter "status_raw" of String, parameter
           "job_monitoring_id" of String, parameter "created" of type
           "timestamp", parameter "updated" of type "timestamp", parameter
           "total_matched" of Long, parameter "total_jobs" of Long, (2)
           parameter "error" of type "Error" -> structure: parameter
           "message" of String, parameter "type" of String, parameter "code"
           of String, parameter "info" of unspecified object, (3) parameter
           "stats" of type "CallStats" (Call performance measurement) ->
           structure: parameter "request_elapsed_time" of Long
        """
        return self._client.call_method(
            'jgi_gateway_eap.staging_jobs',
            [parameter], self._service_ver, context)

    def staging_jobs_summary(self, parameter, context=None):
        """
        Fetch the # of transfers in each state, and the summary of states for each id passed in 
        This supports knowing whether there are pending transfers overall, and also for any
        search results currently being considered (e.g. in a search results window)
        :param parameter: instance of type "StagingJobsSummaryInput" ->
           structure: parameter "username" of String, parameter
           "job_monitoring_ids" of list of String
        :returns: multiple set - (1) parameter "result" of type
           "StagingJobsSummaryResult" -> structure: parameter "states" of
           mapping from String to type "StagingJobsSummary" -> structure:
           parameter "label" of String, parameter "count" of Long, parameter
           "ids_states" of mapping from String to mapping from type "JamoID"
           to type "StagingJobsSummary" -> structure: parameter "label" of
           String, parameter "count" of Long, (2) parameter "error" of type
           "Error" -> structure: parameter "message" of String, parameter
           "type" of String, parameter "code" of String, parameter "info" of
           unspecified object, (3) parameter "stats" of type "CallStats"
           (Call performance measurement) -> structure: parameter
           "request_elapsed_time" of Long
        """
        return self._client.call_method(
            'jgi_gateway_eap.staging_jobs_summary',
            [parameter], self._service_ver, context)

    def remove_staging_job(self, parameter, context=None):
        """
        :param parameter: instance of type "RemoveStagingJobInput" ->
           structure: parameter "username" of String, parameter
           "job_monitoring_id" of String
        :returns: multiple set - (1) parameter "result" of type
           "RemoveStagingJobResult" -> structure: parameter
           "job_monitoring_id" of String, (2) parameter "error" of type
           "Error" -> structure: parameter "message" of String, parameter
           "type" of String, parameter "code" of String, parameter "info" of
           unspecified object, (3) parameter "stats" of type "CallStats"
           (Call performance measurement) -> structure: parameter
           "request_elapsed_time" of Long
        """
        return self._client.call_method(
            'jgi_gateway_eap.remove_staging_job',
            [parameter], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('jgi_gateway_eap.status',
                                        [], self._service_ver, context)
